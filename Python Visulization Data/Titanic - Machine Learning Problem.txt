import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import os
from tabulate import tabulate
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


# 1. Φόρτωση δεδομένων
train_data = pd.read_csv("https://storage.googleapis.com/courses_data/Machine%20Learning%20Titanic/train.csv")
test_data = pd.read_csv("https://storage.googleapis.com/courses_data/Machine%20Learning%20Titanic/test.csv")

# 2. Drop στήλες που δεν χρειάζονται (Ticket, Cabin, PassengerId)
train_data = train_data.drop(columns=["PassengerId", "Ticket", "Cabin"])
test_data = test_data.drop(columns=["PassengerId", "Ticket", "Cabin"])

# 3. Δημιουργία Title από Name
train_data["Title"] = [x.split(".")[0].split(",")[1].strip() for x in train_data["Name"]]
test_data["Title"] = [x.split(".")[0].split(",")[1].strip() for x in test_data["Name"]]

# 4. Δημιουργία flag για ειδικούς τίτλους
def is_special_title(title):
    if title in ['Mr', 'Mrs', 'Miss']:
        return 0
    else:
        return 1

train_data['Special_Title'] = train_data['Title'].apply(is_special_title)
test_data['Special_Title'] = test_data['Title'].apply(is_special_title)

# 5. Drop Name και Title
train_data = train_data.drop(columns=["Name", "Title"])
test_data = test_data.drop(columns=["Name", "Title"])

# 6. Map Sex σε αριθμό
train_data["Sex"] = train_data["Sex"].map({"male":0, "female":1})
test_data["Sex"] = test_data["Sex"].map({"male":0, "female":1})

# 7. Fillna στην Age
train_data["Age"] = train_data["Age"].fillna(train_data["Age"].mean())
test_data["Age"] = test_data["Age"].fillna(train_data["Age"].mean())  # χρήση μέσου όρου του train set

# 8. Fillna στη Fare του test set
test_data["Fare"] = test_data["Fare"].fillna(test_data["Fare"].mean())

# 9. Δημιουργία dummy για Embarked
train_data = pd.concat([train_data, pd.get_dummies(train_data["Embarked"], prefix="Embarked")], axis=1)
test_data = pd.concat([test_data, pd.get_dummies(test_data["Embarked"], prefix="Embarked")], axis=1)

train_data = train_data.drop(columns=["Embarked"])
test_data = test_data.drop(columns=["Embarked"])

# 10. Δημιουργία dummy για Pclass
train_data = pd.concat([train_data, pd.get_dummies(train_data["Pclass"], prefix="Pclass")], axis=1)
test_data = pd.concat([test_data, pd.get_dummies(test_data["Pclass"], prefix="Pclass")], axis=1)

train_data = train_data.drop(columns=["Pclass"])
test_data = test_data.drop(columns=["Pclass"])

# 11. Χωρίζουμε X και y (train)
y_train = train_data["Survived"]
X_train = train_data.drop(columns=["Survived"])

# 12. Scaling με MinMaxScaler
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(test_data)

X_train_scaled_df = pd.DataFrame(X_train_scaled, columns=X_train.columns)
X_test_scaled_df = pd.DataFrame(X_test_scaled, columns=test_data.columns)

train_scaled = pd.concat([X_train_scaled_df, y_train.reset_index(drop=True)], axis=1)

# 13. Εκτύπωση πρώτων 5 γραμμών στην κονσόλα
print("\n--- Train Data (scaled) ---")
print(tabulate(train_scaled.head(), headers='keys', tablefmt='psql'))

print("\n--- Test Data (scaled) ---")
print(tabulate(X_test_scaled_df.head(), headers='keys', tablefmt='psql'))

# 14. Εκπαίδευση μοντέλου
model = LogisticRegression(max_iter=800)
model.fit(X_train_scaled, y_train)

# 15. Πρόβλεψη για test set
test_predictions = model.predict(X_test_scaled)

# 16. Δημιουργία DataFrame για αποθήκευση
submission = pd.DataFrame({
    "PassengerId": pd.read_csv("https://storage.googleapis.com/courses_data/Machine%20Learning%20Titanic/test.csv")["PassengerId"],
    "Survived": test_predictions
})

# 17. Αποθήκευση στην Επιφάνεια Εργασίας
desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
file_path = os.path.join(desktop_path, "submission.csv")


submission.to_csv(file_path, index=False, sep=',')

print(f"\nΤο αρχείο 'submission.csv' αποθηκεύτηκε στην Επιφάνεια Εργασίας: {file_path}")

# 18. Προβολή των πρώτων 10 γραμμών του submission
print("\n--- Submission preview (first 10 rows) ---")
print(tabulate(submission.head(10), headers='keys', tablefmt='psql'))


# Λίστα με μοντέλα για δοκιμή
models = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingClassifier(random_state=42),
    "Support Vector Machine": SVC(),
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5)
}

# Εκπαίδευση και αξιολόγηση κάθε μοντέλου
for name, clf in models.items():
    clf.fit(X_train_scaled, y_train)
    y_pred = clf.predict(X_train_scaled)
    acc = accuracy_score(y_train, y_pred)
    print(f"\n🔹 Model: {name}")
    print(f"Training Accuracy: {acc:.4f}")
    print("Confusion Matrix:")
    print(confusion_matrix(y_train, y_pred))
    print("Classification Report:")
    print(classification_report(y_train, y_pred))

    # Προβλέψεις στο test set
    test_pred = clf.predict(X_test_scaled)

    # Δημιουργία submission file για κάθε μοντέλο
    submission = pd.DataFrame({
        "PassengerId": pd.read_csv("https://storage.googleapis.com/courses_data/Machine%20Learning%20Titanic/test.csv")["PassengerId"],
        "Survived": test_pred
    })

    # Save με όνομα αρχείου ανάλογα με το μοντέλο
    filename = f"submission_{name.replace(' ', '_')}.csv"
    submission.to_csv(os.path.join(desktop_path, filename), index=False)
    print(f"✅ Αποθηκεύτηκε: {filename}")
